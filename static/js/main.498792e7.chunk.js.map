{"version":3,"sources":["contexts/TodosContext.js","components/Form/Form.js","images/pencil.svg","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/Preloader/Preloader.js","utils/api.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["TodosContext","React","createContext","Form","memo","addTask","taskTitle","initialTodosList","useContext","useState","inputValue","setInputValue","showInput","setShowInput","changedTask","setChangedTask","message","setMessage","console","log","useEffect","length","className","onSubmit","e","preventDefault","filter","t","title","toLowerCase","htmlFor","style","paddingLeft","id","type","placeholder","value","required","onChange","target","trim","minLength","maxLength","pattern","color","disabled","TodoItem","index","task","handleTaskChange","handleRemoveTask","timeOfCreation","setTimeOfCreation","isEditFieldVisible","setIsEditFieldVisible","date","DateTime","fromISO","setLocale","toFormat","Date","toISOString","completed","updatedTask","checked","toUpperCase","src","pencil","alt","onClick","newTask","TodoList","handleChangeTodosList","isSubmitting","todosList","click","setClick","tasksToRender","setTasksToRender","selectedView","setSelectedView","list","map","item","temporaryList","splice","findIndex","defaultValue","display","width","height","Preloader","Api","url","this","_url","a","fetch","method","res","ok","json","api","App","setInitialTodosList","setIsSubmitting","getTasks","then","tasks","catch","err","finally","Provider","concat","userId","updatedTodosList","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.498792e7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const TodosContext = React.createContext()","import React from 'react'\r\nimport './Form.css'\r\nimport { TodosContext } from '../../contexts/TodosContext'\r\n\r\nconst Form = React.memo(({ addTask, taskTitle }) => {\r\n\r\n    const initialTodosList = React.useContext(TodosContext)\r\n    const [inputValue, setInputValue] = React.useState('')\r\n    const [showInput, setShowInput] = React.useState('')\r\n    const [changedTask, setChangedTask] = React.useState(taskTitle ? taskTitle : '')\r\n    const [message, setMessage] = React.useState('')\r\n\r\n\r\n    console.log(changedTask)\r\n\r\n    React.useEffect(() => {\r\n        if (inputValue) {\r\n            if (inputValue.length > 4) {\r\n                setMessage('')\r\n            } else {\r\n                setMessage('it requires 5 symbols, but no more than 50')\r\n            }\r\n        }\r\n    }, [inputValue])\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (!message) {\r\n            // если t.title === inputValue - filter вернет массив из одинаковых task'ов\r\n            if (!initialTodosList.filter(t => t.title.toLowerCase() === inputValue.toLowerCase()).length) {\r\n                addTask(inputValue)\r\n                setInputValue('')\r\n                setShowInput('')\r\n            } else {\r\n                setMessage('The same task has already been added!')\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const handleInput = (e) => {\r\n        setChangedTask('')\r\n        setShowInput(e.target.value)\r\n        setInputValue(e.target.value.trim())\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"form\">\r\n\r\n            <form className=\"form__container\" onSubmit={handleSubmit}>\r\n                <label className=\"form__label\" htmlFor=\"input_text\"></label>\r\n                <input\r\n                    className=\"form__input\"\r\n                    style={{ paddingLeft: '30px' }}\r\n                    id=\"input_text\"\r\n                    type=\"text\"\r\n                    placeholder='...todo'\r\n                    value={\r\n                        showInput ?\r\n                            showInput : changedTask ?\r\n                                changedTask : ''\r\n                    }\r\n                    required\r\n                    onChange={handleInput}\r\n                    minLength=\"5\"\r\n                    maxLength=\"50\"\r\n                    pattern='^[0-9A-Za-zА-Яа-яЁё\\.\\s\\-]{5,50}$'\r\n                    title=\"The field can only contain latin, cyrillic, numbers, space or hyphen\"\r\n                />\r\n\r\n                {\r\n                    message &&\r\n                    <span style={{ color: \"red\" }}>{message}</span>\r\n                }\r\n\r\n                {\r\n                    inputValue && !message ?\r\n                        <button className=\"form__btn btn waves-effect waves-light\" type=\"submit\">add</button>\r\n                        :\r\n                        <button disabled className=\"form__btn btn waves-effect waves-light\" type=\"submit\">add</button>\r\n                }\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Form\r\n","export default __webpack_public_path__ + \"static/media/pencil.24e7703b.svg\";","import React from 'react'\r\nimport './TodoItem.css'\r\nimport { DateTime } from 'luxon'\r\nimport pencil from '../../images/pencil.svg'\r\nimport Form from '../Form/Form'\r\n\r\nconst TodoItem = React.memo(({ index, task, handleTaskChange, handleRemoveTask }) => {\r\n\r\n    const [timeOfCreation, setTimeOfCreation] = React.useState('')\r\n    const [isEditFieldVisible, setIsEditFieldVisible] = React.useState(false)\r\n\r\n\r\n    React.useEffect(() => {\r\n        task.date ?\r\n            setTimeOfCreation((DateTime.fromISO(task.date).setLocale('en').toFormat('dd LLL T')))\r\n            :\r\n            setTimeOfCreation((DateTime.fromISO(new Date().toISOString()).setLocale('en').toFormat('dd LLL T')))\r\n    }, [task])\r\n\r\n\r\n    const handleCheckboxChange = (e) => {\r\n        let { completed, ...updatedTask } = task // удалил \"старый\" completed\r\n        handleTaskChange({ ...updatedTask, completed: e.target.checked }) // task с новым значением completed - в обработчик\r\n    }\r\n\r\n\r\n    const handleButtonDeleteClick = () => {\r\n        handleRemoveTask(task)\r\n    }\r\n\r\n\r\n    const handleIconEditClick = () => {\r\n        setIsEditFieldVisible(!isEditFieldVisible)\r\n    }\r\n\r\n\r\n    const changeTask = (newTask) => {\r\n        let { title, ...updatedTask } = task // удалил \"старый\" title\r\n        handleTaskChange({ ...updatedTask, title: newTask }) // task с новым title - в обработчик\r\n        setIsEditFieldVisible(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <li className=\"todo-item\">\r\n            <label>\r\n                <input\r\n                    className=\"todo-item__checkbox\"\r\n                    type=\"checkbox\"\r\n                    onChange={handleCheckboxChange}\r\n                    checked={task.completed}\r\n                    disabled={isEditFieldVisible}\r\n                />\r\n                <span></span>\r\n            </label>\r\n\r\n            <p className={`todo-item__text ${task.completed && 'todo-item__text_crossed-out'} ${isEditFieldVisible && 'todo-item__text_color'}`}>\r\n                {index + '. ' + task.title.toUpperCase()}\r\n                <br />\r\n                <span className=\"todo-item__time\">\r\n                    {timeOfCreation}\r\n                </span>\r\n            </p>\r\n\r\n            <img className=\"todo-item__pencil\" src={pencil} alt=\"edit task\" onClick={handleIconEditClick} />\r\n            <button className=\"waves-effect waves-light btn todo-item__btn\" onClick={handleButtonDeleteClick}>x</button>\r\n\r\n            {\r\n                isEditFieldVisible &&\r\n                <Form\r\n                    addTask={changeTask}\r\n                    taskTitle={task.title}\r\n                />\r\n            }\r\n        </li >\r\n    )\r\n})\r\n\r\nexport default TodoItem\r\n","import React from 'react'\r\nimport './TodoList.css'\r\nimport TodoItem from '../TodoItem/TodoItem'\r\nimport { TodosContext } from '../../contexts/TodosContext'\r\n\r\nconst TodoList = React.memo(({ handleChangeTodosList, isSubmitting }) => {\r\n\r\n    const todosList = React.useContext(TodosContext)\r\n    const [click, setClick] = React.useState(false)\r\n    const [tasksToRender, setTasksToRender] = React.useState([])\r\n    const [selectedView, setSelectedView] = React.useState('all')\r\n\r\n    // селект начального списка\r\n    React.useEffect(() => {\r\n        let list = []\r\n\r\n        selectedView === \"completed\" ?\r\n            list = todosList.filter(t => t.completed)\r\n            :\r\n            selectedView === \"not-completed\" ?\r\n                list = todosList.filter(t => !t.completed)\r\n                :\r\n                list = todosList\r\n\r\n        setTasksToRender(list.map((item, index) =>\r\n            <TodoItem\r\n                key={item.id}\r\n                index={index + 1}\r\n                task={item}\r\n                handleTaskChange={handleTaskChange}\r\n                handleRemoveTask={handleRemoveTask}\r\n            />\r\n        ))\r\n    }, [selectedView, todosList, click])\r\n\r\n\r\n    // обновление task'а при изме чекбокса и редактировании\r\n    const handleTaskChange = (updatedTask) => {\r\n        // ...patch-запрос на сервер с новыми данными\r\n        let temporaryList = todosList\r\n        temporaryList.splice\r\n            (temporaryList.findIndex(t => t.id === updatedTask.id), 1, updatedTask)\r\n        handleChangeTodosList(temporaryList) // в Арр - для изменения списка задач\r\n        setClick(!click) // триггер для рендера\r\n    }\r\n\r\n\r\n    // удаление task'а\r\n    const handleRemoveTask = (task) => {\r\n        handleChangeTodosList(todosList.filter(t => t.id !== task.id)) // в Арр - для изменения списка задач\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"todo-list\">\r\n\r\n            <select\r\n                className=\"todo-list__select\"\r\n                defaultValue=\"all\"\r\n                onChange={(e) => setSelectedView(e.target.value)}\r\n                style={{ display: \"block\", width: \"50%\", height: \"32px\" }}\r\n            >\r\n                <option value=\"all\">All</option>\r\n                <option value=\"completed\">Completed</option>\r\n                <option value=\"not-completed\">Not completed</option>\r\n            </select>\r\n\r\n            {\r\n                tasksToRender.length ?\r\n                    <ul>{tasksToRender}</ul>\r\n                    :\r\n                    !isSubmitting &&\r\n                    <p>You have no tasks added!</p>\r\n            }\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default TodoList\r\n","import React from 'react'\r\nimport './Preloader.css'\r\n\r\nconst Preloader = () => {\r\n\r\n  return (\r\n    <div className=\"lds-ellipsis\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Preloader\r\n","class Api {\r\n    constructor({ url }) {\r\n        this._url = url\r\n    }\r\n\r\n    async getTasks() {\r\n        const res = await fetch(`${this._url}`, {\r\n            method: 'GET',\r\n            'Content-Type': 'application/json',\r\n        })\r\n        return res.ok && res.json()\r\n    }\r\n}\r\n\r\nconst api = new Api // <=  создал экзмепляр\r\n    ({\r\n        url: 'https://jsonplaceholder.typicode.com/todos?_limit=3',\r\n    })\r\n\r\nexport default api","import React from 'react'\nimport './App.css'\n\nimport { TodosContext } from '../../contexts/TodosContext'\nimport Form from '../Form/Form'\nimport TodoList from '../TodoList/TodoList'\nimport Preloader from '../Preloader/Preloader'\nimport api from '../../utils/api'\n\nconst App = () => {\n\n  const [initialTodosList, setInitialTodosList] = React.useState([])\n  const [isSubmitting, setIsSubmitting] = React.useState(false)\n\n\n  // получение от сервера списка задач\n  React.useEffect(() => {\n    setIsSubmitting(true)\n    api.getTasks()\n      .then(tasks => {\n        tasks.length && setInitialTodosList(tasks)\n      })\n      .catch(err => console.log(err))\n      .finally(() => setIsSubmitting(false))\n  }, [])\n\n\n  // добавление task'a в список из формы\n  const addTask = (task) => {\n    // ...post-запрос на сервер\n    setInitialTodosList(initialTodosList.concat(\n      {\n        completed: false,\n        id: new Date(),\n        title: task,\n        userId: 1,\n        date: new Date().toISOString(),\n      }\n    ))\n  }\n\n\n  // обновление списка после клика чекбокса и удаления\n  const handleChangeTodosList = (updatedTodosList) => {\n    setInitialTodosList(updatedTodosList)\n  }\n\n\n  return (\n    <TodosContext.Provider value={initialTodosList}>\n      <div className=\"app\">\n\n        <h1>My Todo App</h1>\n\n        <Form\n          addTask={addTask}\n        />\n\n        {isSubmitting && <Preloader />}\n\n        <TodoList\n          handleChangeTodosList={handleChangeTodosList}\n          isSubmitting={isSubmitting}\n        />\n\n      </div>\n    </ TodosContext.Provider>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App/App'\nimport reportWebVitals from './reportWebVitals'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}